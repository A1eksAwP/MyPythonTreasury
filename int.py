#  Все о целочисленных типах данных в Python.


# способы создания целых чисел:
my_int = 1  # на прямую из числа
my_float_to_int = int(2.4)  # из приведения вещественного числа к целому
my_str_to_int = int('1')  # из приведения строкового числа к целому
my_float_str_to_int = int(float('2.2'))  # из приведения строкового вещественного числа к целому

# математические операции:
x = 1
y = 4
z = 5

my_sum = x + y  # 5
my_sub = x - y  # -3
my_mul = y * z  # 20
my_div = y / z  # 0.8
my_true_div = y // z  # 0
my_remains = z % y  # 1
my_pow = z ** y  # 625
bit_left = 7 << 2  # 28 (7 это b0111 тогда b00011100 это 4+8+16=28)
bit_right = 7 >> 2  # 1 (7 это b0111 тогда b0001 это 2^0=1)

abs(-3)  # 3

# Все не магические методы целочисленного типа:
"""
dir(int):

as_integer_ratio, bit_count, bit_length, conjugate, denominator, from_bytes, imag, numerator, real, to_bytes
"""


# *.as_integer_ratio(): возвращает кортеж из двух целых чисел, которые представляют дробь, эквивалентную целому числу.
x = 15
x.as_integer_ratio()  # (15, 1)

# *.bit_count(): возвращает количество установленных битов в двоичном представлении числа.
x = 15
x.bit_count()  # 4

# *.bit_length(): возвращает длину двоичного представления числа, не считая ведущие нули.
x = 15
x.bit_length()  # 4

# *.conjugate(): возвращает комплексно-сопряженное число, если текущее число является комплексным.
x = 2 + 3j
x.conjugate()  # (2-3j)

# *.denominator: возвращает знаменатель дроби, представленной текущим целым числом (равный 1).
x = 15
print(x.denominator)  # 1

# *.from_bytes(): создает целое число из байтовой строки, используя заданный порядок байтов и знак.
bytes_data = b'\x00\x00\x00\x0f'
x = int.from_bytes(bytes_data, byteorder='big', signed=False)
print(x)  # 15

# *.imag: возвращает мнимую часть комплексного числа, если текущее число является комплексным
# (равный 0, если текущее число является целым числом).
x = 2 + 3j
print(x.imag)  # 3.0

# *.numerator: возвращает числитель дроби, представленной текущим целым числом.
x = 15
print(x.numerator)  # 15

# *.real: возвращает действительную часть комплексного числа, если текущее число является комплексным
# (равный текущему числу, если текущее число является целым числом).
x = 2 + 3j
print(x.real)  # 2.0

# *.to_bytes(): создает байтовую строку, представляющую текущее целое число, с заданным количеством и порядком байтов.
x = 15
bytes_data = x.to_bytes(length=2, byteorder='big', signed=False)
print(bytes_data)  # b'\x00\x0f'
