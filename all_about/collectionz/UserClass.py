# UserDict, UserList и UserString - это классы-обертки, предоставляемые модулем collections, которые упрощают
# создание собственных классов, наследующихся от словаря, списка и строки соответственно.


# UserDict: UserDict - это класс-обертка, который упрощает создание собственных классов, наследующихся от
# словаря (dict). Он предоставляет методы и функциональность словаря, такие как доступ к элементам по ключу,
# добавление и удаление элементов, и т.д. Пример использования:

from collections import UserDict, UserList, UserString


class MyDict(UserDict):
    def __setitem__(self, key, value):
        # Модифицируем значение перед добавлением в словарь
        super().__setitem__(key, value.upper())


d = MyDict()
d['name'] = 'John'
print(d['name'])  # Выводит: JOHN


# UserList: UserList - это класс-обертка, который упрощает создание собственных классов,
# наследующихся от списка (list).
# Он предоставляет методы и функциональность списка, такие как доступ к
# элементам по индексу, добавление и удаление элементов, сортировка и т.д. Пример использования:

class MyList(UserList):
    def append(self, item):
        # Добавляем только уникальные элементы
        if item not in self:
            super().append(item)


my_list = MyList([1, 2, 3, 3, 4, 5])
my_list.append(3)
print(my_list)  # Выводит: [1, 2, 3, 4, 5]


# UserString: UserString - это класс-обертка, который упрощает создание собственных классов,
# наследующихся от строки (str). Он предоставляет методы и функциональность строки,
# такие как сравнение, извлечение подстроки, замена и т.д. Пример использования:

class MyString(UserString):
    def remove_whitespace(self):
        # Удаляем пробелы из строки
        self.data = self.data.replace(" ", "")


s = MyString("Hello World")
s.remove_whitespace()
print(s)  # Выводит: HelloWorld

# Классы UserDict, UserList и UserString предоставляют удобные способы создания собственных коллекций,
# наследуя функциональность соответствующих встроенных типов данных (dict, list, str).
