# Вот пример реализации декоратора log_decorator, который добавляет логирование вызовов функции:

"""
В стандартном модуле logging в Python определены следующие уровни логирования:

DEBUG (уровень отладки) - используется для вывода детальной отладочной информации.
Этот уровень наиболее подробный и используется во время разработки и отладки приложений.

INFO (информационный уровень) - используется для вывода информационных сообщений о ходе выполнения программы.
Это может быть полезно для отслеживания основных шагов или событий в приложении.

WARNING (предупреждение) - используется для вывода предупреждающих сообщений об условиях,
которые могут привести к проблемам или ошибкам в будущем.
Некритические проблемы могут быть обозначены на этом уровне.

ERROR (ошибка) - используется для вывода сообщений об ошибках, которые приводят к некритическим проблемам в программе.
Это может быть использовано для обработки и регистрации ошибок, которые не приводят к прекращению работы программы.

CRITICAL (критическая ошибка) - используется для вывода сообщений о критических ошибках,
которые приводят к прекращению работы программы или серьезным проблемам.
Это самый высокий уровень логирования и обычно используется для сообщений,
требующих немедленного внимания разработчиков.

Каждый уровень логирования имеет числовое значение, которое определяет его приоритет:

DEBUG: 10
INFO: 20
WARNING: 30
ERROR: 40
CRITICAL: 50

При конфигурировании логгера вы можете указать минимальный уровень логирования,
при котором сообщения этого уровня и выше будут записываться.
Например, если установлен уровень логирования на INFO, то все сообщения DEBUG будут проигнорированы,
а только сообщения INFO, WARNING, ERROR и CRITICAL будут записываться.

Обратите внимание, что вы также можете определить собственные уровни логирования,
если вам нужны более подробные или специфичные уровни для вашего приложения.
"""

import functools
import logging


def log_decorator(func):
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        # Инициализация логгера
        logger = logging.getLogger(func.__name__)
        logger.setLevel(logging.INFO)

        # Создание и форматирование сообщения лога
        log_message = f"Function {func.__name__} called with args: {args}, kwargs: {kwargs}"

        # Вывод сообщения в лог
        logger.info(log_message)

        # Вызов функции и получение результата
        result = func(*args, **kwargs)

        # Дополнительное логирование результата (опционально)
        logger.info(f"Function {func.__name__} returned: {result}")

        return result

    return wrapper


# Конфигурирование логгера
logging.basicConfig(level=logging.INFO)


@log_decorator
def add_numbers(a, b):
    return a + b


res = add_numbers(2, 3)
print(res)
